{"ast":null,"code":"var _class;\nimport { HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentInfoService {\n  constructor(http) {\n    this.http = http;\n    this.uploadUrl = 'http://localhost:8080/student/importData';\n    this.apiUrlForConcentrations = 'http://localhost:8080/student/getAllConcentrations';\n    this.apiUrl = 'http://localhost:8080/student';\n  }\n  getStudentInfo(uNumber) {\n    const httpParams = new HttpParams().set('uNumber', uNumber);\n    return this.http.get('http://localhost:8080/student/getStudentDetail', {\n      params: httpParams\n    });\n  }\n  getConcentrationInfo() {\n    return this.http.get('http://localhost:8080/student/concentrations');\n  }\n  reportDownloadUrl() {\n    return this.http.get('http://localhost:8080/student/report-download-url', {\n      headers: new HttpHeaders().append('Accept', 'application/pdf'),\n      responseType: 'blob'\n    });\n  }\n  addCourse(courseData) {\n    return this.http.post(`${this.apiUrl}/addCourse`, courseData, {\n      responseType: 'text'\n    }).pipe(map(response => response));\n  }\n  uploadFile(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const req = new HttpRequest('POST', this.uploadUrl, formData, {\n      reportProgress: true,\n      responseType: 'text'\n    });\n    return this.http.request(req);\n  }\n  getConcentrations() {\n    return this.http.get(this.apiUrlForConcentrations);\n  }\n  addConcentration(name, createdBy) {\n    const url = 'http://localhost:8080/student/addConcentration';\n    const params = new HttpParams().set('name', name).set('createdBy', createdBy);\n    return this.http.post(url, params.toString(), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }),\n      responseType: 'text' // Change the response type to 'text'\n    });\n  }\n}\n_class = StudentInfoService;\n_class.ɵfac = function StudentInfoService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["HttpHeaders","HttpParams","HttpRequest","map","StudentInfoService","constructor","http","uploadUrl","apiUrlForConcentrations","apiUrl","getStudentInfo","uNumber","httpParams","set","get","params","getConcentrationInfo","reportDownloadUrl","headers","append","responseType","addCourse","courseData","post","pipe","response","uploadFile","file","formData","FormData","req","reportProgress","request","getConcentrations","addConcentration","name","createdBy","url","toString","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["C:\\Users\\julak\\Downloads\\Archive\\CMPS UI\\src\\shared\\service\\student\\student-info.service.ts"],"sourcesContent":["import { HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map } from 'rxjs';\n\n@Injectable()\nexport class StudentInfoService {\n  private uploadUrl = 'http://localhost:8080/student/importData';\n  private apiUrlForConcentrations = 'http://localhost:8080/student/getAllConcentrations';\n  private apiUrl= 'http://localhost:8080/student';\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  public getStudentInfo(uNumber : string): Observable<any> {\n    const httpParams = new HttpParams().set('uNumber', uNumber);\n    return this.http.get('http://localhost:8080/student/getStudentDetail',\n      {\n        params: httpParams\n      });\n  }\n\n  public getConcentrationInfo(): Observable<any> {\n    return this.http.get('http://localhost:8080/student/concentrations');\n  }\n\n  public reportDownloadUrl(): Observable<any> {\n    return this.http.get('http://localhost:8080/student/report-download-url',\n      {\n        headers: new HttpHeaders().append('Accept', 'application/pdf'),\n        responseType: 'blob'\n      });\n  }\n\n  addCourse(courseData: any): Observable<string> {\n    return this.http.post(`${this.apiUrl}/addCourse`, courseData, { responseType: 'text' })\n      .pipe(\n        map(response => response as string)\n      );\n  }\n\n  uploadFile(file: File): Observable<HttpEvent<any>> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const req = new HttpRequest('POST', this.uploadUrl, formData, {\n      reportProgress: true,\n      responseType: 'text'\n    });\n\n    return this.http.request(req);\n  }\n\n  getConcentrations(): Observable<any> {\n    return this.http.get(this.apiUrlForConcentrations);\n  }\n\n  addConcentration(name: string, createdBy: string): Observable<string> {\n    const url = 'http://localhost:8080/student/addConcentration';\n    \n    const params = new HttpParams()\n      .set('name', name)\n      .set('createdBy', createdBy);\n\n      return this.http.post(url, params.toString(), {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }),\n        responseType: 'text' // Change the response type to 'text'\n      });\n  }\n}\n"],"mappings":";AAAA,SAAgCA,WAAW,EAAEC,UAAU,EAAEC,WAAW,QAAsB,sBAAsB;AAEhH,SAAqBC,GAAG,QAAQ,MAAM;;;AAGtC,OAAM,MAAOC,kBAAkB;EAI7BC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJN,KAAAC,SAAS,GAAG,0CAA0C;IACtD,KAAAC,uBAAuB,GAAG,oDAAoD;IAC9E,KAAAC,MAAM,GAAE,+BAA+B;EAG3C;EAEGC,cAAcA,CAACC,OAAgB;IACpC,MAAMC,UAAU,GAAG,IAAIX,UAAU,EAAE,CAACY,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC3D,OAAO,IAAI,CAACL,IAAI,CAACQ,GAAG,CAAC,gDAAgD,EACnE;MACEC,MAAM,EAAEH;KACT,CAAC;EACN;EAEOI,oBAAoBA,CAAA;IACzB,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAC,8CAA8C,CAAC;EACtE;EAEOG,iBAAiBA,CAAA;IACtB,OAAO,IAAI,CAACX,IAAI,CAACQ,GAAG,CAAC,mDAAmD,EACtE;MACEI,OAAO,EAAE,IAAIlB,WAAW,EAAE,CAACmB,MAAM,CAAC,QAAQ,EAAE,iBAAiB,CAAC;MAC9DC,YAAY,EAAE;KACf,CAAC;EACN;EAEAC,SAASA,CAACC,UAAe;IACvB,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAC,GAAG,IAAI,CAACd,MAAM,YAAY,EAAEa,UAAU,EAAE;MAAEF,YAAY,EAAE;IAAM,CAAE,CAAC,CACpFI,IAAI,CACHrB,GAAG,CAACsB,QAAQ,IAAIA,QAAkB,CAAC,CACpC;EACL;EAEAC,UAAUA,CAACC,IAAU;IACnB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACT,MAAM,CAAC,MAAM,EAAEQ,IAAI,CAAC;IAE7B,MAAMG,GAAG,GAAG,IAAI5B,WAAW,CAAC,MAAM,EAAE,IAAI,CAACK,SAAS,EAAEqB,QAAQ,EAAE;MAC5DG,cAAc,EAAE,IAAI;MACpBX,YAAY,EAAE;KACf,CAAC;IAEF,OAAO,IAAI,CAACd,IAAI,CAAC0B,OAAO,CAACF,GAAG,CAAC;EAC/B;EAEAG,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAC3B,IAAI,CAACQ,GAAG,CAAC,IAAI,CAACN,uBAAuB,CAAC;EACpD;EAEA0B,gBAAgBA,CAACC,IAAY,EAAEC,SAAiB;IAC9C,MAAMC,GAAG,GAAG,gDAAgD;IAE5D,MAAMtB,MAAM,GAAG,IAAId,UAAU,EAAE,CAC5BY,GAAG,CAAC,MAAM,EAAEsB,IAAI,CAAC,CACjBtB,GAAG,CAAC,WAAW,EAAEuB,SAAS,CAAC;IAE5B,OAAO,IAAI,CAAC9B,IAAI,CAACiB,IAAI,CAACc,GAAG,EAAEtB,MAAM,CAACuB,QAAQ,EAAE,EAAE;MAC5CpB,OAAO,EAAE,IAAIlB,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB,CAAC;MACFoB,YAAY,EAAE,MAAM,CAAC;KACtB,CAAC;EACN;;SAhEWhB,kBAAkB;;mBAAlBA,MAAkB,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAlBtC,MAAkB;EAAAuC,OAAA,EAAlBvC,MAAkB,CAAAwC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}